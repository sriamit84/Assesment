package com.comp.familyTree.service.impl;

import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.comp.familyTree.dao.FamilyTreeRepository;
import com.comp.familyTree.dao.PersonRepository;
import com.comp.familyTree.dao.RelationsRepository;
import com.comp.familyTree.entities.Person;
import com.comp.familyTree.entities.Relation;
import com.comp.familyTree.error.FamilyTreeException;
import com.comp.familyTree.error.PersonNotFoundException;
import com.comp.familyTree.model.PersonModel;
import com.comp.familyTree.service.PersonService;

@Service
public class PersonServiceImpl implements PersonService {

	@Autowired
	private PersonRepository personRepository;

	@Autowired
	private RelationsRepository relationsRepository;

//	@Override
//	@Transactional
//	public Person savePerson(Person person) throws FamilyTreeException {
//		try {
//			return personRepository.save(person);
//		} catch (Exception e) {
//			throw new FamilyTreeException("Error when saving the product with details :" + person.toString());
//		}
//
//	}

	@Override
	public PersonModel getPersonDetails(String personName) throws FamilyTreeException {
		try {
			PersonModel personModel = new PersonModel();
			Optional<Person> personDetails = personRepository.findByPersonName(personName);
			if (personDetails.isPresent()) {
				Person person = personDetails.get();
				personModel.setPersonName(person.getPersonName());
			} else {
				throw new PersonNotFoundException("Person with name " + personName + " not found");
			}
			Optional<Relation> relation = relationsRepository.findByPersonName(personName);
			if (relation.isPresent()) {
				Relation relations = relation.get();
				personModel.setParentName(relations.getParentName());
				personModel.setRelation(relations.getRelation());
				return null;
			} else {
				throw new PersonNotFoundException("Person with name " + personName + " not found");
			}
		} catch (Exception e) {
			throw new FamilyTreeException("Error when fetching the person with name :" + personName);
		}
	}

	@Override
	@Transactional
	public PersonModel updatePerson(String personName, @Valid PersonModel person)
			throws PersonNotFoundException, FamilyTreeException {
		try {

			Optional<Person> personDetails = personRepository.findByPersonName(personName);
			if (personDetails.isPresent()) {

				personDetails.get().setPersonName(person.getPersonName());

				personRepository.save(personDetails.get());

			} else {
				Person p = new Person();
				p.setPersonName(personName);
				personRepository.save(p);
			}

			Optional<Relation> relationDetails = relationsRepository.findByPersonName(personName);
			if (relationDetails.isPresent()) {

				relationDetails.get().setParentName(person.getParentName());
				relationDetails.get().setRelation(person.getRelation());

				personRepository.save(personDetails.get());

			} else {
				Person p = new Person();
				p.setPersonName(personName);
				personRepository.save(p);
				
				Relation relation= new Relation();
				relation.setParentName(person.getParentName());
				relation.setPersonName(person.getPersonName());
				relation.setRelation(person.getRelation());

				// throw new PersonNotFoundException("Person with name " + personName + " not
				// found");
			}

		} catch (Exception e) {
			throw new FamilyTreeException("Error when fetching the person with name :" + personName);
		}
		return person;
	}

	@Override
	public List<Person> getAllPersonDetails() throws FamilyTreeException {
		try {
			return personRepository.findAll();
		} catch (Exception e) {
			throw new FamilyTreeException("Error when fetching all person");
		}
	}

}
